#!/usr/bin/env python
import math
import random
from decimal import Decimal as D


# SVG Primatives
# ==============

class Path(object):

  segments = None  # set in subclass
  pad = "               "

  def __str__(self):
    return "\n".join(self.pad + str(s) for s in self.segments).strip()


class M(object):

  def __init__(self, x, y):
    self.x = D(x)
    self.y = D(y)

  def __str__(self):
    return "M {x},{y}".format(**self.__dict__)


class c(object):

  def __init__(self, x1, y1, x2, y2, x, y, scale):
    self.x1 = D(x1) * scale
    self.y1 = D(y1) * scale
    self.x2 = D(x2) * scale
    self.y2 = D(y2) * scale
    self.x = D(x) * scale
    self.y = D(y) * scale

  def __str__(self):
    return "c {x1},{y1}, {x2},{y2}, {x},{y}".format(**self.__dict__)


class s(object):

  def __init__(self, x2, y2, x, y, scale):
    self.x2 = D(x2) * scale
    self.y2 = D(y2) * scale
    self.x = D(x) * scale
    self.y = D(y) * scale

  def __str__(self):
    return "s {x2},{y2}, {x},{y}".format(**self.__dict__)


class l(object):

  def __init__(self, x, y, scale):
    self.x = D(x) * scale
    self.y = D(y) * scale

  def __str__(self):
    return "l {x},{y}".format(**self.__dict__)


class z(object):
  x = y = D('0.000')
  def __str__(self):
    return "z"


# Circle and Heart
# ================

class Circle(Path):
  def __init__(self, x, y, scale):
    self.x = D(x)
    self.y = D(y)
    self.segments = \
      [ M(x, y)
      , c("0","35.35",  "-28.65","64",  "-64","64", scale)
      , c("-35.35","0", "-64","-28.65", "-64","-64", scale)
      , c("0","-35.35", "28.65","-64",  "64","-64", scale)
      , c("35.35","0",  "64","28.65",   "64","64", scale)
      , z()
       ]

class Heart(Path):
  def __init__(self, x, y, scale):
    self.x = D(x)
    self.y = D(y)
    self.segments = \
      [ M(x, y)
      , c("-7.204","-4.746",  "-14.046","-1.15",  "-17.63","3.017", scale)
      , c("-1.337","1.555",   "-3.629","3.384",   "-7.954","3.384", scale)
      , s("-6.616","-1.829",  "-7.958","-3.384", scale)
      , c("-3.583","-4.167",  "-10.425","-7.763", "-17.625","-3.017", scale)
      , c("-8.458","5.575",   "-6","15.662",      "-3.533","18.559", scale)
      , l("29.116","39.425", scale)
      , l("29.117","-39.425", scale)
      , c("2.463", "-2.897",  "4.925", "-12.984", "-3.533","-18.559", scale)
      , z()
       ]


# Heart coin! :D
# ==============

class HeartCoin(object):
  def __init__(self, x, y, size, color, opacity, rotation):
    """Takes x,y of the center of the shape, and a size.
    """
    x,y = D(x), D(y)

    self.size = D(size)
    self.color = color
    self.opacity = opacity
    self.rotation = "{} {} {}".format(rotation, x, y)

    scale = self.size / D('128')

    circle_x = x + (D('64') * scale)
    circle_y = y
    heart_x = circle_x + ((D('90.025') - D('128')) * scale)
    heart_y = circle_y + ((D('39.875') - D('64')) * scale)

    self.circle = Circle(circle_x, circle_y, scale)
    self.heart = Heart(heart_x, heart_y, scale)


BROWN = "663300"
GREEN = "339966"
YELLOW = "FFCC33"
CREAM = "FFFFCC"
PURPLE = "990066"

[---]

color = CREAM
color = YELLOW
color = PURPLE
color = GREEN
color = BROWN

coins = []
size = D(36)
placed = []

def get_size(x,y):
  if not placed:
    return random.randint(24,64)

  padding = 6
  min_radius = 6
  nearest = None

  # find the distance to the coin nearest to us
  for x_,y_,diameter in placed:
    distance = D(math.sqrt((x-x_)**2 + (y-y_)**2))
    radius = diameter / D(2)
    available = distance - radius - padding
    if available < min_radius:
      return None
    nearest = available if available < nearest or nearest is None else nearest

  return min(D(128), nearest * D(2))


while len(placed) < 50:
  x = D(random.randint(0, 960))
  y = D(random.randint(0, 640))


  # are we inside the top line?
  bound = (D(1.3)*x) - 200
  if y < bound:
    continue

  # find the distance to the lower bound

  bound = (D(10)*x) - 1000
  if y > bound:
    continue


  size = get_size(x,y)
  if size is None:
    continue

  print len(placed) + 1, x, bound
  opacity = 1
  rotation = random.randint(0,360)

  placed.append((x,y,size))

  coins.append(HeartCoin(x, y, size, color, opacity, rotation))

[---]
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="960px"
     height="640px" viewBox="0 0 960 640" enable-background="new 0 0 960 640"
     xml:space="preserve">
  <g id="background">
    <rect id="bg" fill="#{{ CREAM }}" width="960" height="640"/>
  </g>
  <g id="heart-coins">
    {% for i, coin in enumerate(coins) %}
    <g id="coin-{{ i }}"
       transform="rotate({{ coin.rotation }})">

      <path id="coin-{{ i }}-circle"
            fill="#{{ coin.color }}" opacity="{{ coin.opacity }}"
            d="{{ coin.circle }}"/>
      <path id="coin-{{ i }}-heart"
            fill="#FFFFCC"
            d="{{ coin.heart }}"/>
    </g>
    {% end %}
  </g>
</svg>
